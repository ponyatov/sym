# line comment

next = dir@MODULE						" next generation "

( README.md = next/'README.md' ) = [
	'# ![logo]('+LOGO+'.png) '+MODULE
	'### '+ABOUT
	'\n(c) '+AUTHOR+' , '+LICENSE
	'\ngithub: '+GITHUB
]/nl+nl

( .gitignore = next/'gitignore' ) = [	" file masks will be ignored by git "
	'*~' '*swp'
	exe.exe log.log
	ypp.tab.cpp ypp.tab.hpp
	lex.yy.c
	MODULE+'/'
]/nl+nl

skelex = [						" lexical skeleton program "
	files = plain @ [				" files to be opened in editor "
		src.src						" default source script "
		log.log
		core = [					" dynamic language core "
			ypp.ypp 					" syntax parser /bison/ "
			lpp.lpp						" lexer /flex/ "
			hpp.hpp 					" headers "
			cpp.cpp						" C++ core /g++/ "
			Makefile					" build scripts /make/ "
		]
	] 
	.gitignore					
	vim = [ sh.sh bat.bat ]		" (g)vim helpers "
	README.md
]

( sh.sh	  = next/sh.sh   ) = [ '#!/bin/sh'  'gvim -p '+files/sp ]/nl+nl
( bat.bat = next/bat.bat ) = [ '@start .'  '@gvim -p '+files/sp ]/nl+nl 

.end

Makefile = [
log.log: src.src ./exe.exe
	./exe.exe < $< > $@ && tail $(TAIL) $@
C = cpp.cpp ypp.tab.cpp lex.yy.c
H = hpp.hpp ypp.tab.hpp meta.hpp
CXXFLAGS += -std=gnu++11 -D MODULE=\"$(notdir $(CURDIR))\"
./exe.exe: $(C) $(H)
	$(CXX) $(CXXFLAGS) -o $@ $(C) $(L)
ypp.tab.cpp: ypp.ypp
	bison $<
lex.yy.c: lpp.lpp
	flex $<
]

